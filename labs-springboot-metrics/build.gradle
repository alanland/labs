buildscript {
    ext {
        springBootVersion = '2.0.0.BUILD-SNAPSHOT'
    }
    repositories {
        maven { url "${nexusUrl}/content/groups/public/" }
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: 'scala'
//apply plugin: "spring-boot"
    apply plugin: "maven"

    ext {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    group = "com.ittx"
    version = "$projectVersion"

    repositories {
        maven { url "${nexusUrl}/content/groups/public/" }
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web",
                "org.springframework.boot:spring-boot-starter-mail",
                "org.springframework.boot:spring-boot-starter-data-redis",
//   "org.springframework.boot:spring-boot-starter-data-jpa",
//   "org.springframework.session:spring-session:1.3.0.RELEASE",
                "org.springframework.boot:spring-boot-starter-actuator",
//                "org.springframework.session:spring-session",
//                'org.apache.httpcomponents:httpclient:4.5.3',
//                "org.fusesource:sigar:1.6.4",
                "de.codecentric:spring-boot-admin-server:${springBootAdminVersion}",
                "de.codecentric:spring-boot-admin-starter-client:${springBootAdminVersion}",
                "de.codecentric:spring-boot-admin-server-ui:${springBootAdminVersion}",
                "de.codecentric:spring-boot-admin-server-ui-hystrix:${springBootAdminVersion}",
                "de.codecentric:spring-boot-admin-server-ui-turbine:${springBootAdminVersion}",
                "de.codecentric:spring-boot-admin-server-ui-activiti:${springBootAdminVersion}",
                "de.codecentric:spring-boot-admin-server-ui-login:${springBootAdminVersion}",
//   "org.thymeleaf:thymeleaf-spring4",
//   "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect",
//   "org.hibernate:hibernate-validator",
//                "org.hsqldb:hsqldb",
                "org.scala-lang:scala-library:${SCALA_FULL_VERSION}",
//                "com.fasterxml.jackson.module:jackson-module-scala_${SCALA_VERSION}",
//                "com.fasterxml.jackson.datatype:jackson-datatype-jsr310",
                "org.webjars:bootstrap:3.1.1"

        testCompile "org.springframework.boot:spring-boot-starter-test",
//                'org.scalatest:scalatest_2.12:3.0.3',
                "junit:junit"
    }
}

apply plugin: "war"

task npmBuildWeb(type: Exec) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
    } else {
        commandLine 'sh', '-c', 'cd src/web && npm run build && cd ../..'
    }
}

task copyWeb(type: Copy) {
    from 'src/web/dist'
    into 'build/resources/main/static'
}

copyWeb.dependsOn npmBuildWeb
processResources.dependsOn copyWeb

